Float32[0.0, 0.0, 0.0, 0.0, -0.01801653, 0.0, 0.0, 0.0, 0.2643346, 0.26370838, -1.4606618, 0.022485822, -0.19730046, -0.058449738, 0.39520645, 0.09888435, -0.05912171, -0.270324, -0.39116737, 0.48719367, 0.20039612, -0.04967897, 0.22505121, 0.2968562, -0.18070902, -0.08406032, -0.32196787, -0.13733177, 0.3132107, -0.16789906, 0.2587277, -0.08788995, -0.33584267, 0.2045433, -0.06097408, 0.23570222, -0.13704214, 0.116205215, -0.40590653, 0.2356525, 0.09186185, -0.18110682, -0.00831599, -1.0573997, -0.23171228, -0.120087974, 0.121990405, 0.71682996, -0.12853706, -0.67488337, 0.3620558, 0.2434906, 0.14220515, 0.45742944, 0.9918244, 0.19831307, 0.1501505, 0.13641989, -0.50490475, 0.040701244, 0.29913437, 0.2782719, -0.13225622, 0.32995576, 0.2458975, 0.3847399, -0.5931511, 0.06342299, 0.008482611, -0.39180985, 0.06210702, -0.14720993, 0.2799099, -0.19187516, -0.09998012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.35913736, -0.16267377, -0.19412842, 0.5164831, 0.08151038, 0.13901609, 0.24095806, -0.07453401, -0.29540575, 0.31837562, -0.021670654, -0.00876509, -0.30542386, -0.2787824, 0.19984004, -0.3008755, 0.17216586, 0.25455233, -0.27745244, 0.23183125, 0.19759062, -0.1401612, 0.07479348, 0.27213424, -0.1618666, -0.2824384, -0.09623724, -0.058511306, -0.25825, 0.49448037, -0.5256891, -0.30882674, 0.2649198, -0.20181, 0.19472206, 0.3659091, 0.23562652, -0.32881317, -0.07247121, -0.07539588, -0.15133423, -0.29649818, -0.115621895, -0.018357128, -0.14411819, -0.25422305, 0.021876352, -0.23032948, 0.06039882, -0.38964722, 0.2507573, 0.120069325, 0.28719503, 0.3417695, -0.10192993, -0.0062776823, 0.37523943, -0.09574132, 0.31108263, 0.33964851, 0.2691572, -0.25171196, 0.4319833, 0.32653528, 0.102275446, -0.54522294, -0.40797585, -0.51833117, -0.4470341, 0.23616253, 0.1505851, -0.21438792, 0.32776657, 0.053878974, 0.39014596, -0.2718736, -0.033681307, 0.101089686, -0.35055658, 0.2524557, 0.39238042, 0.0037547015, -0.36765984, 0.10508451, -0.24493025, 0.11784117, 0.03980058, 0.14177541, -0.23266506, 0.22993314, -0.0518818, 0.056656737, -0.2981887, 0.22560486, -0.061573114, 0.0508706, 0.29790303, -0.13095687, -0.03745217, -0.23172873, 0.012519584, -0.40060773, 0.023011927, 0.30589405, -0.304991, 0.09436578, -0.21796931, -0.21119422, 0.2947195, 0.014616522, 0.19322166, 0.16526839, 0.17430037, 0.093929924, -0.20259434, -0.49060306, 0.09126423, -0.44813818, 0.20294206, 0.33999836, 0.13070114, 0.21488611, 0.1873236, 0.22228353, 0.24859607, -0.0813429, -0.16964824, 0.3055694, -0.28118077, -0.34887454, -0.3473146, 0.09419963, 0.21371076, -0.24996029, 0.09730398, -0.19149624, 0.3974676, -0.07602303, 0.36718458, -0.19941059, -0.38553387, 0.07661437, -0.25732583, 0.34974283, 0.26306698, -0.013012338, 0.08996174, -0.24627881, 0.3812437, -0.38127056, -0.18238504, 0.082913086, -0.4360785, -0.28756723, 0.0534283, 0.22949891, 0.18882309, -0.17200583, 0.0038914266, -0.00068179006, -0.32483953, -0.31053877, 0.50571364, -0.35298768, 0.21020351, -0.36009365, 0.18745331, -0.10027642, -0.3304922, -0.10109734, 0.17264704, -0.078716986, 0.03078712, -0.047370113, 0.045953833, -0.19664004, -0.32691196, -0.35906106, 0.3153391, -0.29578638, 0.20815648, 0.027460534, -0.15974385, -0.16106121, -0.04720691, -0.04226664, 0.04859929, -0.02895995, 0.08463339, -0.12859842, 0.24545151, -0.057665188, 0.04932154, 0.13619184, 0.4630779, -0.36551237, -0.16402362, -0.2781797, -0.036917757, 0.2541438, 0.3890433, 0.3775806, -0.34519687, 0.19776735, -0.17508566, -0.39368644, -0.14517613, -0.009096336, -0.10526386, 0.21753395, -0.016217107, -0.24809192, 0.11940549, 0.29059774, 0.050446205, 0.08573388, -0.2272752, -0.1458917, -0.21974418, -0.5887688, -0.09610651, -0.38709927, -0.010702968, 0.2815752, -0.15136336, 0.019866347, 0.4280521, 0.0711443, 0.050483145, -0.2445974, -0.32379633, 0.12714006, -0.24674113, -0.11698902, -0.22401866, -0.2579126, 0.15304787, 0.22207494, 0.30015624, 0.24946819, -0.11374413, 0.20499717, -0.1832067, 0.7785347, 0.3413126, 0.11197855, -0.3341837, -0.18745637, -0.27195024, -0.35527357, -0.13820396, 0.30581063, -0.18208216, -0.025863256, -0.06895564, 0.23354295, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4108765, 0.1767239, 0.0941515, -0.53488415, -0.27662086, -0.34797752, -0.25404093, -0.11467793, 0.25002223, 0.0018530509, -0.300831, -0.18036321, 0.04267817, -0.39659116, -0.10061571, -0.35476685, 0.0, 0.0, 0.0]

const USE_J2 = !true

function create_true_hamiltonian()
    I1 = 0.0455f0
    I2 = 0.00425f0
    m3 = 0.183f0*9.81f0
    mass_inv = inv(diagm(vcat(I1, I2)))
    # pe(q) = m3*(cos(q[1])-one(eltype(q)))
    pe(q) = begin
        # qbar = input_mapping(q)
        # return -m3*qbar[1]
        return -m3*q[1]
    end
    Hamiltonian(mass_inv, pe, input_jacobian)
end

input_mapping(x) = [
    one(eltype(x))-cos(x[1]); 
    sin(x[1]); 
    one(eltype(x))-cos(x[2]); 
    sin(x[2])
]
# input_mapping(x) = [
#     one(eltype(x))-cos(x[1]); 
#     x[1]
#     x[2]
#     sin(x[1])
# ]

function input_jacobian(x)
    """
    Input mapping f(x) = [1-cos(x1), sin(x1), 1-cos(x2), sin(x2)]
    This is Jâ‚“f
    """
    T = eltype(x)
    [
        x[2] zero(T); 
        one(T)-x[1] zero(T); 
        zero(T) x[4]; 
        zero(T) one(T)-x[3]
    ]
    # [
    #     x[4] zero(T); 
    #     one(T) zero(T); 
    #     zero(T) one(T); 
    #     one(T)-x[1] zero(T)
    # ]
end

function create_learning_hamiltonian()
    massd_inv = PSDNeuralNetwork(Float32, 2, 2, nin=4, num_hidden_nodes=1)
    vd = NeuralNetwork(Float32, [4,16,16,1], symmetric=!true, fout=x->x.^2, dfout=x->eltype(x)(2x))
    # vd = SOSPoly(4, 1:1)
    Hamiltonian(massd_inv, vd, input_jacobian)
end
